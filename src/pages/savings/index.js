import MainLayout from "@/components/MainLayout";
import {useEffect, useState} from "react";
import {useSession} from "next-auth/react";
import web3 from "@/services/web3";
import Contract from "@/services/contract";
import {fetchUserData} from "@/utilities/user/userData";
import Head from "next/head";
import GoalCard from "@/components/cards/GoalCard";


const Index = () => {
    const [goals, setGoals] = useState([]);
    const [balance, setBalance] = useState("0");
    const {data: session, status} = useSession();
    const contract = Contract();
    const [account, setAccount] = useState(null);
    const [count, setCount] = useState(null);

    useEffect(() => {
        const fetchAccount = async () => {
            if (session) {
                const data = await fetchUserData(session);
                setAccount(data);
            }
        };

        fetchAccount();
    }, [session]);

    useEffect(() => {
        const fetchGoals = async () => {
            if (session && account && account.ethAddress) {
                const goalsCount = await contract.methods.getAllGoals(account.ethAddress).call();
                const allGoals = [];
                for (let i = 0; i < goalsCount.length; i++) {
                    const goal = await contract.methods.getGoal(account.ethAddress, i).call();
                    allGoals.push({index: i, ...goal});
                    setCount(goalsCount.length)
                }
                setGoals(allGoals);
                const userBalance = await web3.eth.getBalance(account.ethAddress);
                setBalance(web3.utils.fromWei(userBalance, "ether"));
            }
        };

        fetchGoals();
    }, [session, account, goals]);

    const createGoal = async (name, targetAmount, deadline) => {
        try {
            console.log("Creating goal with name:", name, "targetAmount:", targetAmount, "deadline:", deadline);
            await contract.methods.createGoal(account.ethAddress, name, targetAmount, deadline).send({from: account.ethAddress});
            // setGoals(prevGoals => [...prevGoals, {name, targetAmount, deadline, goalType}]);
        } catch (error) {
            console.error("Error creating goal:", error);
        }
    };

    const [goalName, setGoalName] = useState('');
    const [targetAmount, setTargetAmount] = useState('');
    const [deadline, setDeadline] = useState('');

    const handleSubmit = async (event) => {
        event.preventDefault();
        const targetAmountInWei = web3.utils.toWei(targetAmount, "ether");
        const deadlineTimestamp = Math.floor(new Date(deadline).getTime() / 1000);
        await createGoal(goalName, targetAmountInWei, deadlineTimestamp);
    };

    return (
        <div>
            <Head>
                <title>EtherLoan - Savings</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/assets/Logo-simple.svg"/>
            </Head>
            <div className="row my-4">
                <div className="col">
                    <div className={"d-flex justify-content-between align-items-center mb-2"}>
                        <p className="text-secondary mb-0">
                            Saving Goals
                        </p>
                        <button type="button" className="btn btn-primary" data-bs-toggle="modal"
                                data-bs-target="#addGoalModal">
                            Create new Goal
                        </button>
                    </div>

                    <div className="row">
                        {count !== null ? <>
                                {goals.map((goal, index) => (
                                    <div className="col-md-6" key={index}>

                                        {/*<p>Goal {index + 1}</p>*/}
                                        {/*<p>Name: {goal.name}</p>*/}
                                        {/*<p>Target Amount: {web3.utils.fromWei(goal.targetAmount, "ether")} ETH</p>*/}
                                        {/*<p>Deadline: {new Date(Number(goal.deadline) * 1000).toLocaleString()}</p>*/}
                                        {/*<p>Balance: {web3.utils.fromWei(goal.balance, "ether")} ETH</p>*/}
                                        {/*<p>Status: {goal.completed ? "Completed" : "In Progress"}</p>*/}
                                        {/*{!goal.completed && (*/}
                                        {/*    <button onClick={() => fundGoal(index, 0.0001)}>Fund 0.1 ETH</button>*/}
                                        {/*)}*/}
                                        {/*<button onClick={() => withdrawFromGoal(index, 0.0001)}>Withdraw 0.1 ETH</button>*/}
                                        <GoalCard
                                            image={goal.goalType}
                                            name={goal.name}
                                            target={web3.utils.fromWei(goal.targetAmount, "ether")}
                                            deadline={new Date(Number(goal.deadline) * 1000).toLocaleString()}
                                            balance={web3.utils.fromWei(goal.balance, "ether")}
                                            status={goal.completed ? "Completed" : "In Progress"}
                                            account={account}
                                            index={index}
                                        />
                                    </div>

                                ))}</> :
                            <div className={"col"}>This is where your goals will be as soon as you add them.</div>}
                    </div>
                    {/*<button className={"btn btn-primary"}*/}
                    {/*        onClick={() => createGoal("Vacation", web3.utils.toWei("5", "ether"), Math.floor(Date.now() / 1000) + 31536000)}>Create*/}
                    {/*    New Goal*/}
                    {/*</button>*/}
                </div>

                <div data-bs-theme="dark" className="modal fade" id="addGoalModal"
                     tabIndex="-1"
                     aria-labelledby="exampleModalLabel"
                     aria-hidden="true">
                    <div className="modal-dialog modal-dialog-centered border-0">
                        <div className="modal-content">
                            <div className="modal-header">
                                <h1 className="modal-title fs-5" id="exampleModalLabel">Create new Goal</h1>
                                <button type="button" className="btn-close" data-bs-dismiss="modal"
                                        aria-label="Close"></button>
                            </div>
                            <div className="modal-body">
                                <form onSubmit={handleSubmit}>
                                    <div className="form-group mb-3">
                                        <label className={"form-label"} htmlFor="goalName">Goal Name</label>
                                        <input
                                            type="text"
                                            className="form-control form-input w-100"
                                            id="goalName"
                                            value={goalName}
                                            onChange={(e) => setGoalName(e.target.value)}
                                            required
                                        />
                                    </div>
                                    <div className="form-group mb-3">
                                        <label className={"form-label"} htmlFor="targetAmount">Target Amount
                                            (ETH)</label>
                                        <input
                                            type="number"
                                            className="form-control form-input w-100"
                                            id="targetAmount"
                                            value={targetAmount}
                                            onChange={(e) => setTargetAmount(e.target.value)}
                                            required
                                        />
                                    </div>
                                    <div className="form-group mb-3">
                                        <label className={"form-label"} htmlFor="deadline">Deadline</label>
                                        <input
                                            type="date"
                                            className="form-control form-input w-100"
                                            id="deadline"
                                            value={deadline}
                                            onChange={(e) => setDeadline(e.target.value)}
                                            required
                                        />
                                    </div>
                                    {/*<div className="form-group mb-4">*/}
                                    {/*    <label className={"form-label"} htmlFor="goalType">Goal Type</label>*/}
                                    {/*    <select*/}
                                    {/*        className="form-select form-input w-100"*/}
                                    {/*        id="goalType"*/}
                                    {/*        value={goalType}*/}
                                    {/*        onChange={(e) => setGoalType(e.target.value)}*/}
                                    {/*        required*/}
                                    {/*    >*/}
                                    {/*        <option value="default">Select a goal type</option>*/}
                                    {/*        <option value="vacation">Vacation</option>*/}
                                    {/*        <option value="investement">Investment</option>*/}
                                    {/*        <option value="saving">Saving</option>*/}
                                    {/*        <option value="gifts">Gifts</option>*/}

                                    {/*    </select>*/}
                                    {/*</div>*/}
                                    <button type="submit" className="btn btn-primary w-100">
                                        Create New Goal
                                    </button>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );

};

Index.getLayout = function getLayout(page) {
    return <MainLayout>{page}</MainLayout>;
};

export default Index;