import {useEffect, useState} from 'react';
import {getSession, signOut, useSession} from 'next-auth/react';
import Head from "next/head";
import MainLayout from "@/components/MainLayout";
import {FontAwesomeIcon} from "@fortawesome/react-fontawesome";
import {faEnvelope, faUser} from "@fortawesome/free-solid-svg-icons";
import {fetchUserData} from "@/utilities/user/userData";

const AccountSettings = () => {
    const [error, setError] = useState(null);
    const {data: session, status, update} = useSession();

    const [userData, setUserData] = useState({
        username: "",
        email: "",
        password: ""
    });

    useEffect(() => {
        const fetchData = async () => {
            if (session) {
                try {
                    const data = await fetchUserData(session);
                    if (data) {
                        setUserData({
                            username: data.username,
                            email: data.email,
                            password: data.password
                        });
                    } else {
                        setError("User data not found");
                    }
                } catch (error) {
                    setError(error.message);
                }
            }
        };

        fetchData();
    }, [session]);

    const handleChange = (e) => {
        const {name, value} = e.target;
        setUserData(prevUserData => ({
            ...prevUserData,
            [name]: value
        }));
    };

    const handleSubmit = async (e) => {
        e.preventDefault();
        setError(null); // Reset error before new request

        try {
            const response = await fetch('/api/update-user', {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({email: session.user.email, ...userData})
            });

            if (response.ok) {
                console.log('User account updated successfully');
                await updateSession(userData); // Update the session with the new user data
                // Sign out the user
                await signOut({redirect: true, callbackUrl: "/auth/login"});


            } else {
                const data = await response.json();
                console.error('Error updating user account:', data.error);
                setError(data.error);
            }

        } catch (error) {
            console.error('Error updating user account:', error.message);
            setError('An unexpected error occurred');
            console.log(error);
        }
    };

    if (!session || !userData) {
        return <div>Loading...</div>;
    }

    const updateSession = async (updatedUserData) => {
        const session = await getSession(); // Corrected variable name
        console.log("Old session:");
        console.log(session);

        if (session) {
            await update(updatedUserData);
            console.log("New session:");
            const newSession = await getSession();
            console.log(newSession);
        } else {
            console.log("Session not found");
        }
    };


    return (
        <div>
            <Head>
                <title>EtherLoan - AccountSettings</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/assets/Logo-simple.svg"/>
            </Head>
            <h1 className={"mb-4 mt-5"}>Account Settings</h1>
            <form onSubmit={handleSubmit}>
                <div className={"mb-4"}>
                    <label className={"form-label"} htmlFor="username"><FontAwesomeIcon className={"me-2"}
                                                                                        icon={faUser}/> Username</label>
                    <input className={"form-control form-input"} type="text" id="username" name="username"
                           value={userData.username} onChange={handleChange}/>
                </div>
                <div className={"mb-4"}>
                    <label className={"form-label"} htmlFor="email"><FontAwesomeIcon className={"me-2"}
                                                                                     icon={faEnvelope}/> Email</label>
                    <input className={"form-control form-input"} type="email" id="email" name="email"
                           value={userData.email} onChange={handleChange}/>
                </div>
                <button className={"btn btn-primary w-35"} type="submit">Save changes</button>
            </form>
            <div className="my-3">
                {error && <p style={{color: 'red'}}>{error}</p>}
            </div>
        </div>
    );
}

AccountSettings.getLayout = function getLayout(page) {
    return <MainLayout>{page}</MainLayout>;
};

export default AccountSettings;
